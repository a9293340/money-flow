name: 🚀 Deploy to Production

on:
  push:
    branches: [main]
    # 只在這些路徑有變更時觸發
    paths:
      - 'frontend/**'
      - 'deploy/**'
      - '.github/workflows/**'

  pull_request:
    branches: [main]
    paths:
      - 'frontend/**'
      - 'deploy/**'
      - '.github/workflows/**'

  workflow_dispatch: # 允許手動觸發
    inputs:
      force_deploy:
        description: '強制執行完整部署 (忽略路徑檢查)'
        required: false
        default: false
        type: boolean

env:
  # Docker 相關
  DOCKER_IMAGE: ${{ vars.DOCKER_IMAGE }}

  # Google Cloud 相關
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  CLOUD_RUN_REGION: ${{ secrets.CLOUD_RUN_REGION }}
  CLOUD_RUN_SERVICE: ${{ secrets.CLOUD_RUN_SERVICE }}

  # Node.js 版本
  NODE_VERSION: ${{ vars.NODE_VERSION }}

  # 應用程式 URL（支援自定義域名）
  SERVICE_URL: ${{ vars.SERVICE_URL }}

jobs:
  # 程式碼品質檢查 - 只要 workflow 觸發就執行
  quality-check:
    name: 📋 Code Quality Check
    runs-on: ubuntu-latest
    # 只排除 [skip ci] 標記
    if: |
      github.event_name == 'workflow_dispatch' || 
      github.event_name == 'pull_request' ||
      !contains(github.event.head_commit.message, '[skip ci]')

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: 'yarn.lock'

      - name: 🔧 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🔍 TypeScript check
        run: yarn type-check

      - name: 🧹 ESLint check
        run: yarn lint

      - name: 🧪 Run tests
        run: yarn test

  # Docker 建置和推送 - 排除 src-tauri 和 tests 目錄
  build-and-push:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: quality-check
    # 只排除純 src-tauri 或純 tests 變更
    if: |
      (needs.quality-check.result == 'success') && (
        github.event.inputs.force_deploy == 'true' ||
        github.event_name == 'pull_request' ||
        (
          github.event_name == 'push' &&
          !contains(github.event.head_commit.message, '[skip deploy]')
        )
      )
    outputs:
      deploy-tag: ${{ steps.tag.outputs.deploy_tag }}
      image-tags: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏷️ Generate deployment tag
        id: tag
        run: |
          # 生成唯一部署標籤: {branch}-{timestamp}-{commit}
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          TIMESTAMP=$(date +"%Y%m%d-%H%M")
          COMMIT_SHORT="${GITHUB_SHA:0:7}"

          DEPLOY_TAG="${BRANCH_NAME}-${TIMESTAMP}-${COMMIT_SHORT}"

          echo "deploy_tag=${DEPLOY_TAG}" >> $GITHUB_OUTPUT
          echo "🏷️ Generated deployment tag: ${DEPLOY_TAG}"

      - name: 📋 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=raw,value=${{ steps.tag.outputs.deploy_tag }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./frontend/docker/Dockerfile.monorepo
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: 📝 Display build info
        run: |
          echo "🏷️ Built image tags:"
          echo "${{ steps.meta.outputs.tags }}"
          echo "🔑 Image digest: ${{ steps.build.outputs.digest }}"

  # 部署到 Cloud Run
  deploy:
    name: 🚀 Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: [quality-check, build-and-push]
    environment: production
    # 只在 build-and-push 成功且是 main branch push 或手動觸發時部署
    if: |
      (needs.build-and-push.result == 'success') && 
      (github.event_name == 'push' || github.event.inputs.force_deploy == 'true')

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: ⚙️ Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: 🚀 Deploy to Cloud Run
        run: |
          DEPLOY_TAG="${{ needs.build-and-push.outputs.deploy-tag }}"
          FULL_IMAGE="${{ env.DOCKER_IMAGE }}:${DEPLOY_TAG}"

          echo "📝 Deploying with versioned image: ${FULL_IMAGE}"
          echo "🏷️ Deployment tag: ${DEPLOY_TAG}"

          # 更新 Cloud Run YAML 中的鏡像標籤
          sed -i "s|image: .*|image: ${FULL_IMAGE}|" deploy/cloud-run-service.yaml

          echo "📝 Updated Cloud Run service configuration:"
          grep -A2 -B2 "image:" deploy/cloud-run-service.yaml

          # 部署到 Cloud Run
          gcloud run services replace deploy/cloud-run-service.yaml \
            --region=${{ env.CLOUD_RUN_REGION }} \
            --project=${{ env.GCP_PROJECT_ID }}

          echo "✅ Deployment completed successfully"
          echo "🏷️ Deployed version: ${DEPLOY_TAG}"

      - name: 🔓 Allow unauthenticated access
        run: |
          gcloud run services add-iam-policy-binding ${{ env.CLOUD_RUN_SERVICE }} \
            --member="allUsers" \
            --role="roles/run.invoker" \
            --region=${{ env.CLOUD_RUN_REGION }} \
            --project=${{ env.GCP_PROJECT_ID }}

      - name: 🌐 Set service URL
        id: url
        run: |
          SERVICE_URL="${{ env.SERVICE_URL }}"
          echo "🌍 Using configured service URL: $SERVICE_URL"

          # 驗證 URL 不為空
          if [ -z "$SERVICE_URL" ]; then
            echo "❌ SERVICE_URL variable is not set!"
            echo "🔧 Please add SERVICE_URL to GitHub Variables"
            echo "   Example: https://your-service.asia-east1.run.app"
            exit 1
          fi

          # 驗證 URL 格式
          if [[ $SERVICE_URL =~ ^https://.*$ ]]; then
            echo "✅ Valid HTTPS URL format"
          else
            echo "⚠️ URL should start with https://"
          fi

          # 注意: SERVICE_URL 現在由環境變數管理

  # 部署後驗證
  verify-deployment:
    name: ✅ Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: 🏥 Basic Health Check
        run: |
          echo "🔍 Testing basic application health..."
          SERVICE_URL="${{ env.SERVICE_URL }}"

          echo "📍 Service URL: $SERVICE_URL"
          echo "🎯 Testing URL: $SERVICE_URL/api/health"

          # 等待應用程式启動
          echo "⏳ Waiting for application to be ready..."
          sleep 45

          # 多次嘗試健康檢查
          for i in {1..3}; do
            echo "🔍 Health check attempt $i/3..."
            
            if curl -f -s "$SERVICE_URL/api/health" -o /dev/null; then
              echo "✅ Basic health check passed"
              echo "🎉 Service is responding correctly"
              exit 0
            else
              echo "⚠️ Attempt $i failed"
              if [ $i -lt 3 ]; then
                echo "💤 Waiting 20 seconds before retry..."
                sleep 20
              fi
            fi
          done

          echo "❌ Basic health check failed after 3 attempts"
          echo "🔧 Final attempt with verbose output:"
          curl -v "$SERVICE_URL/api/health" || echo "Connection failed"
          exit 1

      - name: ⚙️ Health Check - Environment
        run: |
          echo "🔍 Testing environment configuration..."
          SERVICE_URL="${{ env.SERVICE_URL }}"

          if curl -f -s "$SERVICE_URL/api/health/env" -o /dev/null; then
            echo "✅ Environment health check passed"
          else
            echo "⚠️ Environment health check failed (non-critical)"
            echo "This may be due to missing environment variables"
          fi

      - name: 🎉 Deployment Success
        run: |
          echo "🎊 Deployment completed successfully!"
          echo "🌍 Application URL: ${{ env.SERVICE_URL }}"
          echo "🏥 Health Check: ${{ env.SERVICE_URL }}/api/health"
          echo "🏷️ Deployed Version: ${{ needs.deploy.outputs.deploy-tag || 'N/A' }}"
          echo "🐳 Docker Image: ${{ env.DOCKER_IMAGE }}:${{ needs.deploy.outputs.deploy-tag || 'latest' }}"
          echo "📅 Deployed at: $(date)"
          echo ""
          echo "🚀 Personal Finance Manager is now live!"
          echo "You can access the application at the URL above."

  # 部署通知
  notify:
    name: 📢 Smart Notification
    runs-on: ubuntu-latest
    needs: [quality-check, build-and-push, deploy, verify-deployment]
    if: always() && needs.quality-check.result != 'skipped'

    steps:
      - name: 📊 Pipeline Summary
        run: |
          echo "📋 Pipeline Summary Report"
          echo "========================="
          echo "🕒 執行時間: $(date)"
          echo "🎯 觸發方式: ${{ github.event_name }}"
          if [ "${{ github.event.inputs.force_deploy }}" == "true" ]; then
            echo "⚡ 手動強制部署: 已啟用"
          fi
          echo ""

          # 分析執行的階段
          QUALITY_STATUS="${{ needs.quality-check.result }}"
          BUILD_STATUS="${{ needs.build-and-push.result }}"
          DEPLOY_STATUS="${{ needs.deploy.result }}"
          VERIFY_STATUS="${{ needs.verify-deployment.result }}"

          echo "📊 執行階段狀態:"
          echo "  📋 Code Quality: $QUALITY_STATUS"
          echo "  🐳 Build & Push: $BUILD_STATUS"
          echo "  🚀 Deploy: $DEPLOY_STATUS"
          echo "  ✅ Verify: $VERIFY_STATUS"
          echo ""

          echo "💡 智能觸發提示:"
          echo "  - 只修改文檔 (.md, docs/) → 完全跳過"
          echo "  - 修改程式碼但非 Web 相關 → 只執行品質檢查"  
          echo "  - 修改 Web 檔案 (app/, server/, nuxt.config等) → 執行完整部署"
          echo "  - 修改 Tauri 配置 (src-tauri/) → 只執行品質檢查"
          echo "  - 修改 deploy/ 配置 → 執行完整部署"
          echo "  - 手動觸發 + force_deploy → 強制執行所有階段"
          echo "  - PR → 品質檢查 + 建置測試 (不部署)"

      - name: 🎉 Complete Deployment Success
        if: needs.verify-deployment.result == 'success'
        run: |
          echo "🎊 完整部署流程成功！"
          echo "✅ Personal Finance Manager 已成功部署到生產環境"
          echo "🌍 服務 URL: ${{ env.SERVICE_URL }}"
          if [ -n "${{ needs.build-and-push.outputs.deploy-tag }}" ]; then
            echo "🏷️ 部署版本: ${{ needs.build-and-push.outputs.deploy-tag }}"
            echo "🐳 Docker Image: ${{ env.DOCKER_IMAGE }}:${{ needs.build-and-push.outputs.deploy-tag }}"
          fi
          echo "🎯 完整流程: 品質檢查 → Docker建置 → Cloud Run部署 → 健康驗證 ✅"

      - name: ⚡ Quality Check Only Success
        if: |
          needs.quality-check.result == 'success' && 
          (needs.build-and-push.result == 'skipped' || needs.build-and-push.result == '')
        run: |
          echo "✅ 代碼品質檢查通過"
          echo "📋 此次變更只包含非關鍵檔案，已跳過 Docker 建置和部署"
          echo "💡 觸發完整部署需要修改 frontend/ 或 deploy/ 目錄中的檔案"

      - name: 🚧 Build Only Success (PR)
        if: |
          needs.build-and-push.result == 'success' && 
          (needs.deploy.result == 'skipped' || needs.deploy.result == '') &&
          github.event_name == 'pull_request'
        run: |
          echo "✅ Pull Request - 建置測試成功"
          echo "🐳 Docker 映像建置完成，但未部署到生產環境"
          echo "🔀 合併到 main branch 後會自動觸發生產部署"

      - name: ❌ Pipeline Failure
        if: |
          needs.quality-check.result == 'failure' ||
          needs.build-and-push.result == 'failure' ||
          needs.deploy.result == 'failure' ||
          needs.verify-deployment.result == 'failure'
        run: |
          echo "❌ Pipeline 執行失敗"
          echo "🚨 Personal Finance Manager CI/CD 流程中斷"
          echo "📊 請檢查失敗的階段並查看詳細日誌"
          echo ""
          if [ "${{ needs.quality-check.result }}" == "failure" ]; then
            echo "💥 品質檢查失敗 - 請修復代碼問題"
          fi
          if [ "${{ needs.build-and-push.result }}" == "failure" ]; then
            echo "💥 Docker 建置失敗 - 請檢查 Dockerfile 和建置配置"
          fi
          if [ "${{ needs.deploy.result }}" == "failure" ]; then
            echo "💥 部署失敗 - 請檢查 Cloud Run 配置和權限"
          fi
          if [ "${{ needs.verify-deployment.result }}" == "failure" ]; then
            echo "💥 部署驗證失敗 - 服務可能未正確啟動"
          fi
