name: 🚀 Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch: # 允許手動觸發

env:
  # Docker 相關
  DOCKER_IMAGE: ${{ vars.DOCKER_IMAGE }}
  
  # Google Cloud 相關
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  CLOUD_RUN_REGION: ${{ secrets.CLOUD_RUN_REGION }}
  CLOUD_RUN_SERVICE: ${{ secrets.CLOUD_RUN_SERVICE }}
  
  # Node.js 版本
  NODE_VERSION: ${{ vars.NODE_VERSION }}

jobs:
  # 程式碼品質檢查
  quality-check:
    name: 📋 Code Quality Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock

      - name: 🔧 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🔍 TypeScript check
        run: yarn type-check

      - name: 🧹 ESLint check
        run: yarn lint

      - name: 🧪 Run tests
        run: yarn test

  # Docker 建置和推送
  build-and-push:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: quality-check
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 📋 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # 部署到 Cloud Run
  deploy:
    name: 🚀 Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: [quality-check, build-and-push]
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: ⚙️ Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: 🚀 Deploy to Cloud Run
        run: |
          gcloud run services replace deploy/cloud-run-service.yaml \
            --region=${{ env.CLOUD_RUN_REGION }} \
            --project=${{ env.GCP_PROJECT_ID }}

      - name: 🔓 Allow unauthenticated access
        run: |
          gcloud run services add-iam-policy-binding ${{ env.CLOUD_RUN_SERVICE }} \
            --member="allUsers" \
            --role="roles/run.invoker" \
            --region=${{ env.CLOUD_RUN_REGION }} \
            --project=${{ env.GCP_PROJECT_ID }}

      - name: 🌐 Get service URL
        id: url
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.CLOUD_RUN_SERVICE }} \
            --region=${{ env.CLOUD_RUN_REGION }} \
            --project=${{ env.GCP_PROJECT_ID }} \
            --format='value(status.url)')
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "🌍 Service URL: $SERVICE_URL"

    outputs:
      service-url: ${{ steps.url.outputs.SERVICE_URL }}

  # 部署後驗證
  verify-deployment:
    name: ✅ Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
      - name: 🏥 Health Check - Database
        run: |
          echo "🔍 Testing database health..."
          if curl -f -s "${{ needs.deploy.outputs.service-url }}/api/health/database" >/dev/null; then
            echo "✅ Database health check passed"
          else
            echo "❌ Database health check failed"
            exit 1
          fi

      - name: ⚙️ Health Check - Environment
        run: |
          echo "🔍 Testing environment health..."
          if curl -f -s "${{ needs.deploy.outputs.service-url }}/api/health/env" >/dev/null; then
            echo "✅ Environment health check passed"
          else
            echo "❌ Environment health check failed"
            exit 1
          fi

      - name: 🎉 Deployment Success
        run: |
          echo "🎊 Deployment completed successfully!"
          echo "🌍 Application URL: ${{ needs.deploy.outputs.service-url }}"
          echo "🏥 Health Check: ${{ needs.deploy.outputs.service-url }}/api/health/database"

  # 部署通知
  notify:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy, verify-deployment]
    if: always()
    
    steps:
      - name: 📢 Success Notification
        if: needs.verify-deployment.result == 'success'
        run: |
          echo "🎉 部署成功通知"
          echo "✅ Personal Finance Manager 已成功部署到生產環境"
          echo "🌍 服務 URL: ${{ needs.deploy.outputs.service-url }}"
          echo "🕒 部署時間: $(date)"
          
      - name: ⚠️ Failure Notification
        if: needs.verify-deployment.result == 'failure' || needs.deploy.result == 'failure'
        run: |
          echo "❌ 部署失敗通知"
          echo "🚨 Personal Finance Manager 生產環境部署失敗"
          echo "📊 請檢查 GitHub Actions 日誌"
          echo "🕒 失敗時間: $(date)"