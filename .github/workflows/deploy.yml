name: 🚀 Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch: # 允許手動觸發

env:
  # Docker 相關
  DOCKER_IMAGE: ${{ vars.DOCKER_IMAGE }}
  
  # Google Cloud 相關
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  CLOUD_RUN_REGION: ${{ secrets.CLOUD_RUN_REGION }}
  CLOUD_RUN_SERVICE: ${{ secrets.CLOUD_RUN_SERVICE }}
  
  # Node.js 版本
  NODE_VERSION: ${{ vars.NODE_VERSION }}

jobs:
  # 程式碼品質檢查
  quality-check:
    name: 📋 Code Quality Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock

      - name: 🔧 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🔍 TypeScript check
        run: yarn type-check

      - name: 🧹 ESLint check
        run: yarn lint

      - name: 🧪 Run tests
        run: yarn test

  # Docker 建置和推送
  build-and-push:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: quality-check
    outputs:
      deploy-tag: ${{ steps.tag.outputs.deploy_tag }}
      image-tags: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏷️ Generate deployment tag
        id: tag
        run: |
          # 生成唯一部署標籤: {branch}-{timestamp}-{commit}
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          TIMESTAMP=$(date +"%Y%m%d-%H%M")
          COMMIT_SHORT="${GITHUB_SHA:0:7}"
          
          DEPLOY_TAG="${BRANCH_NAME}-${TIMESTAMP}-${COMMIT_SHORT}"
          
          echo "deploy_tag=${DEPLOY_TAG}" >> $GITHUB_OUTPUT
          echo "🏷️ Generated deployment tag: ${DEPLOY_TAG}"
          
      - name: 📋 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=raw,value=${{ steps.tag.outputs.deploy_tag }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: 📝 Display build info
        run: |
          echo "🏷️ Built image tags:"
          echo "${{ steps.meta.outputs.tags }}"
          echo "🔑 Image digest: ${{ steps.build.outputs.digest }}"

  # 部署到 Cloud Run
  deploy:
    name: 🚀 Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: [quality-check, build-and-push]
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: ⚙️ Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: 🚀 Deploy to Cloud Run
        run: |
          DEPLOY_TAG="${{ needs.build-and-push.outputs.deploy-tag }}"
          FULL_IMAGE="${{ env.DOCKER_IMAGE }}:${DEPLOY_TAG}"
          
          echo "📝 Deploying with versioned image: ${FULL_IMAGE}"
          echo "🏷️ Deployment tag: ${DEPLOY_TAG}"
          
          # 更新 Cloud Run YAML 中的鏡像標籤
          sed -i "s|image: .*|image: ${FULL_IMAGE}|" deploy/cloud-run-service.yaml
          
          echo "📝 Updated Cloud Run service configuration:"
          grep -A2 -B2 "image:" deploy/cloud-run-service.yaml
          
          # 部署到 Cloud Run
          gcloud run services replace deploy/cloud-run-service.yaml \
            --region=${{ env.CLOUD_RUN_REGION }} \
            --project=${{ env.GCP_PROJECT_ID }}
          
          echo "✅ Deployment completed successfully"
          echo "🏷️ Deployed version: ${DEPLOY_TAG}"

      - name: 🔓 Allow unauthenticated access
        run: |
          gcloud run services add-iam-policy-binding ${{ env.CLOUD_RUN_SERVICE }} \
            --member="allUsers" \
            --role="roles/run.invoker" \
            --region=${{ env.CLOUD_RUN_REGION }} \
            --project=${{ env.GCP_PROJECT_ID }}

      - name: 🌐 Get service URL
        id: url
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.CLOUD_RUN_SERVICE }} \
            --region=${{ env.CLOUD_RUN_REGION }} \
            --project=${{ env.GCP_PROJECT_ID }} \
            --format='value(status.url)')
          
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "🌍 Service URL: $SERVICE_URL"
          
          # 驗證 URL 格式
          if [[ $SERVICE_URL =~ ^https://.*\.run\.app$ ]]; then
            echo "✅ Valid Cloud Run URL format"
          else
            echo "⚠️ Unexpected URL format: $SERVICE_URL"
          fi

    outputs:
      service-url: ${{ steps.url.outputs.service_url }}

  # 部署後驗證
  verify-deployment:
    name: ✅ Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
      - name: 🏥 Basic Health Check
        run: |
          echo "🔍 Testing basic application health..."
          SERVICE_URL="${{ needs.deploy.outputs.service-url }}"
          
          # 檢查 SERVICE_URL 是否為空
          if [ -z "$SERVICE_URL" ]; then
            echo "❌ SERVICE_URL is empty!"
            echo "🔧 Debug info:"
            echo "deploy job outputs: ${{ toJSON(needs.deploy.outputs) }}"
            exit 1
          fi
          
          echo "📍 Service URL: $SERVICE_URL"
          echo "🎯 Testing URL: $SERVICE_URL/api/health"
          
          # 等待應用程式启動
          echo "⏳ Waiting for application to be ready..."
          sleep 30
          
          # 多次嘗試健康檢查
          for i in {1..3}; do
            echo "🔍 Health check attempt $i/3..."
            
            if curl -f -s "$SERVICE_URL/api/health" -o /dev/null; then
              echo "✅ Basic health check passed"
              echo "🎉 Service is responding correctly"
              exit 0
            else
              echo "⚠️ Attempt $i failed"
              if [ $i -lt 3 ]; then
                echo "💤 Waiting 15 seconds before retry..."
                sleep 15
              fi
            fi
          done
          
          echo "❌ Basic health check failed after 3 attempts"
          echo "🔧 Attempting to get more information..."
          curl -v "$SERVICE_URL/api/health" || echo "Connection failed"
          exit 1

      - name: ⚙️ Health Check - Environment  
        run: |
          echo "🔍 Testing environment configuration..."
          SERVICE_URL="${{ needs.deploy.outputs.service-url }}"
          
          if curl -f -s "$SERVICE_URL/api/health/env" -o /dev/null; then
            echo "✅ Environment health check passed"
          else
            echo "⚠️ Environment health check failed (non-critical)"
            echo "This may be due to missing environment variables"
          fi

      - name: 🎉 Deployment Success
        run: |
          echo "🎊 Deployment completed successfully!"
          echo "🌍 Application URL: ${{ needs.deploy.outputs.service-url }}"
          echo "🏥 Health Check: ${{ needs.deploy.outputs.service-url }}/api/health"
          echo "🏷️ Deployed Version: ${{ needs.build-and-push.outputs.deploy-tag }}"
          echo "🐳 Docker Image: ${{ env.DOCKER_IMAGE }}:${{ needs.build-and-push.outputs.deploy-tag }}"
          echo "📅 Deployed at: $(date)"
          echo ""
          echo "🚀 Personal Finance Manager is now live!"
          echo "You can access the application at the URL above."

  # 部署通知
  notify:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy, verify-deployment]
    if: always()
    
    steps:
      - name: 📢 Success Notification
        if: needs.verify-deployment.result == 'success'
        run: |
          echo "🎉 部署成功通知"
          echo "✅ Personal Finance Manager 已成功部署到生產環境"
          echo "🌍 服務 URL: ${{ needs.deploy.outputs.service-url }}"
          echo "🏷️ 部署版本: ${{ needs.build-and-push.outputs.deploy-tag }}"
          echo "🐳 Docker Image: ${{ env.DOCKER_IMAGE }}:${{ needs.build-and-push.outputs.deploy-tag }}"
          echo "🕒 部署時間: $(date)"
          
      - name: ⚠️ Failure Notification
        if: needs.verify-deployment.result == 'failure' || needs.deploy.result == 'failure'
        run: |
          echo "❌ 部署失敗通知"
          echo "🚨 Personal Finance Manager 生產環境部署失敗"
          echo "📊 請檢查 GitHub Actions 日誌"
          echo "🕒 失敗時間: $(date)"